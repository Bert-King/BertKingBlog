(window.webpackJsonp=window.webpackJsonp||[]).push([[33],{462:function(e,t,r){"use strict";r.r(t);var n=r(15),o=Object(n.a)({},(function(){var e=this,t=e.$createElement,r=e._self._c||t;return r("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[r("h1",{attrs:{id:"路径相关的题目"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#路径相关的题目"}},[e._v("#")]),e._v(" 路径相关的题目")]),e._v(" "),r("p",[r("a",{attrs:{href:"https://leetcode-cn.com/problems/unique-paths/",target:"_blank",rel:"noopener noreferrer"}},[e._v("62. 不同路径 - M"),r("OutboundLink")],1)]),e._v(" "),r("p",[r("a",{attrs:{href:"https://leetcode-cn.com/problems/unique-paths-ii/",target:"_blank",rel:"noopener noreferrer"}},[e._v("63. 不同路径 II - M"),r("OutboundLink")],1)]),e._v(" "),r("p",[r("a",{attrs:{href:"https://leetcode-cn.com/problems/minimum-path-sum/",target:"_blank",rel:"noopener noreferrer"}},[e._v("64. 最小路径和 - M"),r("OutboundLink")],1)]),e._v(" "),r("blockquote",[r("p",[e._v("经典的最优子结构问题。")])]),e._v(" "),r("hr"),e._v(" "),r("p",[e._v("这些题目都是简单的"),r("a",{attrs:{href:"https://zh.wikipedia.org/wiki/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92",target:"_blank",rel:"noopener noreferrer"}},[e._v("动态规划"),r("OutboundLink")],1)]),e._v(" "),r("p",[e._v("动态规划就是通过把原问题分解为相对简单的子问题来求解复杂问题的方法。")]),e._v(" "),r("p",[e._v("动态规划经常适用于"),r("strong",[e._v("有重叠子问题")]),e._v("和"),r("strong",[e._v("最优子结构")]),e._v("性质的问题。")]),e._v(" "),r("h3",{attrs:{id:"最优子结构"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#最优子结构"}},[e._v("#")]),e._v(" 最优子结构")]),e._v(" "),r("p",[e._v("其核心思想：局部最优解能决定全局最优解(Sometime，需要取近似)。IOW,问题能够分解成子问题来解决。")]),e._v(" "),r("p",[r("a",{attrs:{href:"https://leetcode-cn.com/problems/interleaving-string/",target:"_blank",rel:"noopener noreferrer"}},[e._v("97. 交错字符串 - M"),r("OutboundLink")],1)]),e._v(" "),r("blockquote",[r("p",[e._v("转化为路径的思想来求解")])])])}),[],!1,null,null,null);t.default=o.exports}}]);